// This value *must* be the same in js.
@CarouselAnnotation-min-width: @AnnotationCard-width +
                                @AnnotationCard-padding * 2 +
                                @CarouselAnnotation-padding * 2 +
                                @Annotation-padding * 2;

@CarouselAnnotation-mini-min-width: @AnnotationCard-mini-width +
                                     @AnnotationCard-padding * 2 +
                                     @CarouselAnnotation-padding * 2 +
                                     @Annotation-padding * 2;

.in-carousel-width {
    /**
     * Needed in carousel for proper layout.
     */
    width: @AnnotationCard-width + @AnnotationCard-padding * 2;

    .mini-width
    & {
        width: @AnnotationCard-mini-width +
        @AnnotationCard-padding * 2;   
    }
}

// FIXME: There should be a better way to handle carousel sizing and layout. Afterwards, the in-carousel-width class might no longer be necessary.
.cards-block {
    
    .is-desktop
    .carousel
    & {
        margin-bottom: @CarouselAnnotation-padding;
    }
}
.annotation-title-block {

    .is-mobile
    .carousel
    & {
        margin-top: @CarouselAnnotation-padding;
    }
}

.AnnotationCard {
    position: relative;

    min-height: 0;
    max-height: 0;
    padding: 0 @AnnotationCard-padding;
    opacity: 0;

    transition: min-height @animation-default,
                max-height @animation-default,
                margin @animation-default,
                padding @animation-default,
                opacity @animation-default,
                box-shadow @animation-default;

    .text-shadow-mixin(@AnnotationCard-colour);

    // Select for annotation card dots, not portal dots.
    > .dots-block {
        position: absolute;
        height: @annotation-dot-diameter;
    }

    .override-animate
    & {
        transition: none;
    }
}

.DomManager.narrative .CarouselAnnotation.narrative,
.DomManager.backstory .CarouselAnnotation.backstory,
.DomManager.observation .CarouselAnnotation.observation,
.DomManager.pun .CarouselAnnotation.pun,
.DomManager.reference .CarouselAnnotation.reference,
.DomManager.songwriting .CarouselAnnotation.songwriting,
.DomManager.portal .CarouselAnnotation.portal,
.DomManager.afterword .CarouselAnnotation.afterword {

    min-width: @CarouselAnnotation-min-width;

    .annotation-title-block {
        max-height: 2em; // Arbitrary value that's larger than its max height.
        min-height: @app-small-icon-diameter;
        padding: @Annotation-padding 0;
    }
}

.DomManager.mini-width.narrative .CarouselAnnotation.narrative,
.DomManager.mini-width.backstory .CarouselAnnotation.backstory,
.DomManager.mini-width.observation .CarouselAnnotation.observation,
.DomManager.mini-width.pun .CarouselAnnotation.pun,
.DomManager.mini-width.reference .CarouselAnnotation.reference,
.DomManager.mini-width.songwriting .CarouselAnnotation.songwriting,
.DomManager.mini-width.portal .CarouselAnnotation.portal,
.DomManager.mini-width.afterword .CarouselAnnotation.afterword {

    min-width: @CarouselAnnotation-mini-min-width;
}

.DomManager.narrative .AnnotationCard.narrative,
.DomManager.backstory .AnnotationCard.backstory,
.DomManager.observation .AnnotationCard.observation,
.DomManager.pun .AnnotationCard.pun,
.DomManager.reference .AnnotationCard.reference,
.DomManager.songwriting .AnnotationCard.songwriting,
.DomManager.portal .AnnotationCard.portal,
.DomManager.afterword .AnnotationCard.afterword {

    min-height: @annotation-dot-diameter;
    max-height: 500px; // Arbitrary large number.
    padding: @AnnotationCard-padding;
    opacity: 1;
    box-shadow: @AnnotationCard-box-shadow;

    &:not(:last-child) {
        margin-bottom: @Annotation-padding;
    }
}

// Override if in carousel and hidden by single lyric column.
.CarouselAnnotation {

    .show-only-right
    &.in-column-left,
    .show-only-left
    &.in-column-right {
        opacity: 0;
    
        .AnnotationCard {
            margin: auto;
            opacity: 0;
            box-shadow: none;
        }
    }
}
