// These values *must* be the same in js.
@margin__menuChild: 10px;
@margin__menuChild__narrow: 3px;
@minWidth__childTitle: 72px;

@height__menu: 72px;

// This works out to 50px;
@height__menuTopRow__phone:
    @length__icon +
    2 * @margin__menuChild__narrow;

// Arbitrary for now.
@height__audioBanner__bottomRow: @height__audio / 2;

// Arbitrary for now.
@height__audioSlider__bottomRow: @height__audio / 2;

@height__bottomRow:
    @height__audioBanner__bottomRow +
    @height__audioSlider__bottomRow;

// Includes menu and slider.
@height__aboveOverlay__phone:
    @height__menuTopRow__phone +
    @height__audioSlider__bottomRow;

// Includes menu, banner, and slider.
@height__menu__phone:
    @height__aboveOverlay__phone +
    @height__audioSlider__bottomRow;

@maxWidth__childAudio: 640px; // Arbitrary.

.Menu,
.MenuTopRow {
    position: absolute;
    top: 0;
    left: 0;
    height: @height__menu;
}

.Menu {
    width: 100%;
    z-index: @zIndex__menuField;

    ._phone_
    & {
        height: @height__menu__phone;
    }
}

.MenuTopRow {
    overflow: hidden;
    
    box-shadow: @boxShadow__menu;
    background-color: #8dd;

    transition:
        left @animationDuration__slow,
        transform @animationDuration__slow,
        max-width @animationDuration__default;

    ._overlayShown_
    &.width__mainColumn {
        max-width: @maxWidth__mini;

        left: 50%;
        transform: translateX(-50%);
    }

    ._phone_
    & {
        height: @height__menuTopRow__phone;
    }
}

.MenuBottomRow {
    position: absolute;
    bottom: 0;
    height: @height__bottomRow;

    transition: bottom @animationDuration__default;

    ._overlayShown_
    &,
    ._song_._lyricExpanded_
    & {
        bottom: @height__audioBanner__bottomRow;
    }
}

.MenuTopRow,
.MenuTopRow__childScoresTips {
    display: flex;
    align-items: center;
}

.MenuTopRow__child {
    height: 100%;
    flex-grow: 1;

    transition:
        min-width @animationDuration__fast,
        max-width @animationDuration__fast;
}

.MenuTopRow__childTitle {
    min-width: @minWidth__childTitle;
    max-width: 200px; // Arbitrary.

    // Override.
    overflow: visible;

    ._titleInAudio_
    & {
        /**
         * Don't bother to show if title in audio. Child component also will
         * not be rendered.
         */
        display: none;
    }
}

.MenuTopRow__childAudio {
    flex-grow: 2;

    margin: 0 @margin__menuChild;    
    max-width: @maxWidth__childAudio;
    
    transition: margin @animationDuration__default;
    
    background-color: #8d8;

    ._laptop_
    &,
    ._mini_
    & {
        margin: 0 @margin__menuChild__narrow;
    }

    ._scoresTipsMain_
    & {
        // If scores tips is hidden, remove audio subfield's right margin.
        margin-right: 0;
    }

    ._titleInAudio_
    & {
        // If title is hidden, remove audio subfield's left margin.
        margin-left: 0;
    }

    ._overlayShown_
    & {
        max-width: 100%;
        margin: 0;
    }

    ._mobile_
    & {
        justify-content: flex-end;
    }

    min-width: @minWidth__audioBanner + @AudioButtons-constant + @length__iconLarge + @audio-block-padding * 3;
    
    box-sizing: border-box;
    
    ._tablet_
    & {
        min-width: @minWidth__audioBanner + @AudioButtons-constant + @length__iconLarge__tablet + @audio-block-padding * 3;
    }
    
    ._mini_
    & {
        min-width: @minWidth__audioBanner + @AudioButtons-constant + @length__iconLarge__mini + @audio-block-padding * 3;
    }
    
    ._phone_
    & {
        min-width: @AudioButtons-constant + @length__icon + @audio-block-padding * 3;
    }
}

.MenuTopRow__childScoresTips {
    
    ._scoresTipsMain_
    & {
        /**
         * Don't bother to show if scores tips in main. Child component also
         * will not be rendered.
         */
        display: none;
    }

    min-width: @width__childScoresTips;

    ._tablet_
    & {
        min-width: @scores-tips-_tablet_;
    }

    ._mini_
    & {
        min-width: @scores-tips-_mini_;
    }
}

.MenuTopRow__child__hiddenInOverlay {
    ._overlayShown_
    & {
        width: 0;
        min-width: 0;
        max-width: 0;
    }
}
